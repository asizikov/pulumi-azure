name: 'Echo Function CI-CD Pipeline $(Date:yyyyMMdd)-$(Rev:rr)'

trigger: 
  - main
  - feature/*

pool:
 vmImage: 'ubuntu-20.04'

variables:
  - group: 'AccessTokens'
  - name: buildConfiguration
    value: 'Release'
  - name: appWorkingDir
    value: '$(System.DefaultWorkingDirectory)/src/EchoFunction'

stages:
    - stage: update_infrastructure
      displayName: 'Prepare Azure infrastructure'
      jobs:
          - job: Infrastructure
            variables:
              stackName: 'asizikov/infra/feature'
            steps:
                - checkout: self
                  displayName: 'Checkout code'
                  fetchDepth: 1
                - task: PowerShell@2
                  inputs:
                    targetType: 'inline'
                    script: |
                      $branchSource = "$(Build.SourceBranch)"
                      $tmpStackName = $branchSource -replace "refs/heads/", ""
                      $tmpStackName = $tmpStackName -replace "/", "-"
                      $tmpStackName = "asizikov/infra/" + $tmpStackName
                      Write-Host $tmpStackName
                      Write-Host "##vso[task.setvariable variable=stackName;]$tmpStackName"
                    errorActionPreference: 'continue'
                  displayName: 'Set up stack for feature branch'
                  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature'))
                - task: Pulumi@1
                  displayName: 'Select Stack'
                  inputs:
                    azureSubscription: 'Service connection for Pulumi'
                    command: 'stack'
                    args: 'select'
                    cwd: 'infra/'
                    stack: '$(stackName)'
                    createStack: true
                
                - task: Pulumi@1
                  displayName: 'Pulumi up'
                  inputs:
                    azureSubscription: 'Service connection for Pulumi'
                    command: 'up'
                    args: '--yes'
                    cwd: 'infra/'
                    stack: '$(stackName)'

                - script: |
                    echo "##vso[task.setvariable variable=FunctionAppName;isOutput=true]$(pulumi stack output --cwd 'infra/' FunctionAppName)"
                    echo "##vso[task.setvariable variable=FunctionStatingSlotName;isOutput=true]$(pulumi stack output --cwd 'infra/' FunctionStatingSlotName)"
                    echo "##vso[task.setvariable variable=StagingSlotUri;isOutput=true]$(pulumi stack output --cwd 'infra/' StagingSlotUri)"
                    echo "##vso[task.setvariable variable=ResourceGroupName;isOutput=true]$(pulumi stack output --cwd 'infra/' ResourceGroupName)"
                  displayName: 'Set stack outputs as variables'
                  name: 'pulumi'

    - stage: build_application
      displayName: 'Build and Pack Azure Function App'
      dependsOn: []
      jobs:
          - job: Build
            steps:
                - checkout: self
                  displayName: 'Checkout code'
                  fetchDepth: 1

                - task: DotNetCoreCLI@2
                  displayName: 'Build Azure Function'
                  inputs:
                    command: 'build'
                    projects: '$(appWorkingDir)/*.csproj'
                    arguments: '--output $(System.DefaultWorkingDirectory)/publish_output --configuration $(buildConfiguration)'
                - task: ArchiveFiles@2
                  displayName: 'Archive files'
                  inputs:
                    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
                    includeRootFolder: false
                    archiveType: zip
                    archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
                    replaceExistingArchive: true

                - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
                  displayName: 'Publish Artifact'
                  artifact: drop
          - job: Test
            displayName: 'Run Unit Tests'
            steps:
              - checkout: self
                displayName: 'Checkout code'
                fetchDepth: 1
              - task: DotNetCoreCLI@2
                displayName: 'Run Unit Tests'
                inputs:
                  command: 'test' 
                  arguments: '--filter "FullyQualifiedName!~ApiTests"'

    - stage: deploy_function_app
      displayName: 'Deploy Azure Function to Staging'
      dependsOn: 
        - update_infrastructure
        - build_application
      variables:
       azureFunctionAppName: $[ stageDependencies.update_infrastructure.Infrastructure.outputs['pulumi.FunctionAppName'] ]
       stagingSlotName: $[ stageDependencies.update_infrastructure.Infrastructure.outputs['pulumi.FunctionStatingSlotName'] ]
       resourceGroupName: $[ stageDependencies.update_infrastructure.Infrastructure.outputs['pulumi.ResourceGroupName'] ]
      condition: succeeded()
      jobs:
        - deployment: Deploy
          displayName: "Deploy Azure Function"
          environment: 'development'

          strategy:
            runOnce:
              deploy:
                steps:
                  - task: AzureFunctionApp@1
                    inputs:
                      azureSubscription: 'Service connection for Pulumi'
                      appType: 'functionApp'
                      appName: '$(azureFunctionAppName)'
                      package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
                      resourceGroupName: '$(resourceGroupName)'
                      slotName: '$(stagingSlotName)'
                      deployToSlotOrASE: true
                      deploymentMethod: 'auto'
    
    - stage: verify_staging_app
      displayName: 'Run API tests'
      dependsOn: 
        - deploy_function_app
        - update_infrastructure
      variables:
        stagingSlotUri: $[ stageDependencies.update_infrastructure.Infrastructure.outputs['pulumi.StagingSlotUri'] ]
      jobs:
          - job: Api_Test
            displayName: 'Run API Tests'
            steps:
              - checkout: self
                displayName: 'Checkout code'
                fetchDepth: 1
              - task: DotNetCoreCLI@2
                displayName: 'Run Unit Tests'
                inputs:
                  command: 'test' 
                  arguments: '--filter "FullyQualifiedName~ApiTests"'

    - stage: go_to_production
      displayName: 'Swap Staging Slot'
      dependsOn: 
        - verify_staging_app
        - update_infrastructure
      variables:
        stagingSlotUri: $[ stageDependencies.update_infrastructure.Infrastructure.outputs['pulumi.StagingSlotUri'] ]
        azureFunctionAppName: $[ stageDependencies.update_infrastructure.Infrastructure.outputs['pulumi.FunctionAppName'] ]
        stagingSlotName: $[ stageDependencies.update_infrastructure.Infrastructure.outputs['pulumi.FunctionStatingSlotName'] ]
        resourceGroupName: $[ stageDependencies.update_infrastructure.Infrastructure.outputs['pulumi.ResourceGroupName'] ]
      jobs:
        - job: swap
          steps:
            - task: AzureAppServiceManage@0
              inputs:
                azureSubscription: 'Service connection for Pulumi'
                Action: 'Swap Slots'
                WebAppName: '$(azureFunctionAppName)'
                ResourceGroupName: '$(resourceGroupName)'
                SourceSlot: '$(stagingSlotName)'